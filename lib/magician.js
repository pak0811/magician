// Generated by CoffeeScript 1.8.0
(function() {
  var Magician, exec;

  exec = require('child_process').exec;

  Magician = (function() {
    function Magician(srcPath, destPath) {
      this.srcPath = srcPath;
      this.destPath = destPath;
      this.srcPath = '"' + this.srcPath + '"';
      this.destPath = '"' + this.destPath + '"';
    }

    Magician.prototype.resize = function(options, callback) {
      var command, extra;
      if (!options.width || options.width < 0 || !options.height || options.height < 0) {
        return callback(new Error("width and height should be bigger than 0"));
      }
      extra = options.extra != null ? options.extra : '';
      command = 'resize';
      if (options.thumbnail) {
        command = 'thumbnail';
      }
      if (options.sample) {
        command = 'sample';
      }
      return exec("convert " + this.srcPath + " -" + command + " " + options.width + "x" + options.height + " " + extra + " " + this.destPath, function(err) {
        if (callback) {
          return callback(err);
        }
      });
    };

    Magician.prototype.resizeTo = function(width, height, callback) {
      return this.resize({
        width: width,
        height: height,
        extra: '-auto-orient'
      }, callback);
    };

    Magician.prototype.crop = function(options, callback) {
      var extra;
      extra = options.extra != null ? options.extra : '';
      if (!options.x) {
        options.x = 0;
      }
      if (!options.y) {
        options.y = 0;
      }
      if (options.x < 0 || options.y || options.width < 0 || options.height < 0) {
        if (callback) {
          callback(new Error("x, y should be bigger than -1; width and height should be bigger than 0"));
        }
        return;
      }
      return exec("convert " + this.srcPath + " -crop " + options.width + "x" + options.height + "+" + options.x + "+" + options.y + " " + extra + " " + this.destPath, function(err) {
        if (callback) {
          return callback(err);
        }
      });
    };

    Magician.prototype.cropFrom = function(x, y, width, height, callback) {
      return this.crop({
        x: x,
        y: y,
        width: width,
        height: height,
        extra: '-auto-orient'
      }, callback);
    };

    Magician.prototype.convert = function(callback) {
      return exec("convert " + this.srcPath + " " + this.destPath, function(err) {
        if (callback) {
          return callback(err);
        }
      });
    };

    Magician.prototype.getDimensions = function(callback) {
      return exec("identify " + this.srcPath, (function(_this) {
        return function(err, stdout) {
          var height, width, _ref;
          if (err) {
            if (callback) {
              callback(err);
            }
            return;
          }
          _ref = stdout.split(" ")[2].split("x"), width = _ref[0], height = _ref[1];
          _this.width = parseInt(width);
          _this.height = parseInt(height);
          if (callback) {
            return callback(false, {
              width: _this.width,
              height: _this.height
            });
          }
        };
      })(this));
    };

    return Magician;

  })();

  module.exports = Magician;

}).call(this);
